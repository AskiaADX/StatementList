/* standard.css */
{%
Dim responseColourPrimary =CurrentADC.PropValue("responseColourPrimary")
Dim fontColour =CurrentADC.PropValue("fontColour")
Dim responseShadow =CurrentADC.PropValue("responseShadow")
Dim responseSelectedColourPrimary =CurrentADC.PropValue("responseSelectedColourPrimary")
Dim responseSelectedFontColour =CurrentADC.PropValue("responseSelectedFontColour")
Dim responseSelectedShadow =CurrentADC.PropValue("responseSelectedShadow")

Dim borderColour =CurrentADC.PropValue("borderColour")
Dim borderThickness =CurrentADC.PropValue("borderThickness")
Dim borderStyle =CurrentADC.PropValue("borderStyle")
Dim responseSelectedBorderColour =CurrentADC.PropValue("responseSelectedBorderColour")
Dim responseSelectedBorderThickness =CurrentADC.PropValue("responseSelectedBorderThickness")
Dim responseSelectedBorderStyle =CurrentADC.PropValue("responseSelectedBorderStyle")
Dim borderRadius =CurrentADC.PropValue("borderRadius")

Dim statementTextAlign =CurrentADC.PropValue("statementTextAlign")
Dim statementImagePosition =CurrentADC.PropValue("statementImagePosition")
Dim responseTextAlign =CurrentADC.PropValue("responseTextAlign")
Dim responseImagePosition =CurrentADC.PropValue("responseImagePosition")
Dim responseContentPosition =CurrentADC.PropValue("responseContentPosition")
Dim responseAlign =CurrentADC.PropValue("responseAlign")
Dim displayResponseText =CurrentADC.PropValue("displayResponseText")

Dim nsResponseColourPrimary =CurrentADC.PropValue("nsResponseColourPrimary")
Dim nsfontColour =CurrentADC.PropValue("nsfontColour")
Dim nsResponseBorderColour =CurrentADC.PropValue("nsResponseBorderColour")
Dim nsResponseBorderThickness =CurrentADC.PropValue("nsResponseBorderThickness")
Dim nsResponseBorderStyle =CurrentADC.PropValue("nsResponseBorderStyle")
Dim nsResponseShadow =CurrentADC.PropValue("nsResponseShadow")
Dim nsResponseSelectedColourPrimary =CurrentADC.PropValue("nsResponseSelectedColourPrimary")
Dim nsResponseSelectedFontColour =CurrentADC.PropValue("nsResponseSelectedFontColour")
Dim nsResponseSelectedBorderColour =CurrentADC.PropValue("nsResponseSelectedBorderColour")
Dim nsResponseSelectedBorderThickness =CurrentADC.PropValue("nsResponseSelectedBorderThickness")
Dim nsResponseSelectedBorderStyle =CurrentADC.PropValue("nsResponseSelectedBorderStyle")
Dim nsResponseSelectedShadow =CurrentADC.PropValue("nsResponseSelectedShadow")

Dim statementColourPrimary =CurrentADC.PropValue("statementColourPrimary")
Dim altStatementColourPrimary =CurrentADC.PropValue("altStatementColourPrimary")
Dim statementFontColour =CurrentADC.PropValue("statementFontColour")
Dim statementBorderColour =CurrentADC.PropValue("statementBorderColour")
Dim statementBorderRadius =CurrentADC.PropValue("statementBorderRadius")
Dim statementBorderThickness =CurrentADC.PropValue("statementBorderThickness")
Dim statementBorderStyle =CurrentADC.PropValue("statementBorderStyle")
Dim statementShadow =CurrentADC.PropValue("statementShadow")
Dim statementFontSize =CurrentADC.PropValue("statementFontSize")

Dim responseHoverColourPrimary =CurrentADC.PropValue("responseHoverColourPrimary")
Dim responseHoverFontColour =CurrentADC.PropValue("responseHoverFontColour")
Dim responseHoverBorderColour =CurrentADC.PropValue("responseHoverBorderColour")
Dim responseHoverBorderThickness =CurrentADC.PropValue("responseHoverBorderThickness")
Dim responseHoverBorderStyle =CurrentADC.PropValue("responseHoverBorderStyle")
Dim responseHoverShadow =CurrentADC.PropValue("responseHoverShadow")

Dim showResponseHoverColour =CurrentADC.PropValue("showResponseHoverColour")
Dim showResponseHoverFontColour =CurrentADC.PropValue("showResponseHoverFontColour")
Dim showResponseHoverBorder =CurrentADC.PropValue("showResponseHoverBorder")

Dim responseTextPadding =CurrentADC.PropValue("responseTextPadding")
Dim responseTextLineHeight =CurrentADC.PropValue("responseTextLineHeight")

Dim fontSize =CurrentADC.PropValue("fontSize")
Dim responseHeight =CurrentADC.PropValue("responseHeight")

Dim statementTextPadding =CurrentADC.PropValue("statementTextPadding")
Dim statementTextLineHeight =CurrentADC.PropValue("statementTextLineHeight")
Dim statementHeight =CurrentADC.PropValue("statementHeight")

Dim counterBorderColour =CurrentADC.PropValue("counterBorderColour")
Dim counterBorderRadius =CurrentADC.PropValue("counterBorderRadius")
Dim counterBorderWidth =CurrentADC.PropValue("counterBorderWidth")
Dim counterPrimaryColour =CurrentADC.PropValue("counterPrimaryColour")
Dim counterFontColour =CurrentADC.PropValue("counterFontColour")
Dim counterDropShadow =CurrentADC.PropValue("counterDropShadow")
Dim counterAlign =CurrentADC.PropValue("counterAlign")

Dim buttonBorderColour =CurrentADC.PropValue("buttonBorderColour")
Dim buttonBorderRadius =CurrentADC.PropValue("buttonBorderRadius")
Dim buttonBorderWidth =CurrentADC.PropValue("buttonBorderWidth")
Dim buttonPrimaryColour =CurrentADC.PropValue("buttonPrimaryColour")
Dim buttonDropShadow =CurrentADC.PropValue("buttonDropShadow")
Dim buttonArrowColour =CurrentADC.PropValue("buttonArrowColour")

IF responseHeight = "" Then
	responseHeight = "auto"
EndIF
IF statementHeight = "" Then
	statementHeight = "auto"
EndIF
%}

/* General */
#adc_{%= CurrentADC.InstanceId%}
{
	text-align:{%= responseAlign%};
}

/* Statements */
#adc_{%= CurrentADC.InstanceId%} .statement
{

	/* Decoration */
	{% IF CurrentADC.PropValue("statementBorderThickness") = "none" Then %}
		border: none;
	{% Else %}
		border: {%= statementBorderThickness%} {%= statementBorderStyle%} rgb({%= statementBorderColour%});
	{% EndIF %}

	/* Effects */
	-webkit-border-radius:	{%= statementBorderRadius%};
	-moz-border-radius:		{%= statementBorderRadius%};
	-khtml-border-radius:	{%= statementBorderRadius%};
	border-radius:			{%= statementBorderRadius%};

	-webkit-box-shadow: {%= statementShadow%};
	-moz-box-shadow: {%= statementShadow%};
	box-shadow: {%= statementShadow%};

	height: {%= statementHeight%};

}
.animate {
    -webkit-transition: all .2s ease-in-out;
     -moz-transition: all .2s ease-in-out;
     -o-transition: all .2s ease-in-out;
     transition: all .2s ease-in-out;
}
#adc_{%= CurrentADC.InstanceId%} .evenStatement
{
	background-color: rgb({%= statementColourPrimary%});
}

#adc_{%= CurrentADC.InstanceId%} .altStatement
{

	background-color: rgb({%= altStatementColourPrimary%});

}

#adc_{%= CurrentADC.InstanceId%} .statement_text
{
	font-size:{%= statementFontSize%};
	text-align:{%= statementTextAlign%};
	color:rgb({%= statementFontColour%});
	padding:{%= statementTextPadding%};
	line-height:{%= statementTextLineHeight%};
}

#adc_{%= CurrentADC.InstanceId%} .statement_image
{
	float:{%= statementImagePosition%};
	margin: 5px;
	{% IF statementImagePosition = "none" Then %}
		margin:auto;
		margin-top: 10px;
		display:flex;
	{% EndIF %}
}

/* Reponses */
#adc_{%= CurrentADC.InstanceId%} .responseItem
{

	/* Decoration */
	{% IF CurrentADC.PropValue("borderThickness") = "none" Then %}
		border: none;
	{% Else %}
		border: {%= borderThickness%} {%= borderStyle%} rgb({%= borderColour%});
	{% EndIF %}
	background-color: rgb({%= responseColourPrimary%});

	/* Effects */
	-webkit-border-radius:	{%= borderRadius%};
	-moz-border-radius:		{%= borderRadius%};
	-khtml-border-radius:	{%= borderRadius%};
	border-radius:			{%= borderRadius%};

	-webkit-box-shadow: {%= responseShadow%};
	-moz-box-shadow: {%= responseShadow%};
	box-shadow: {%= responseShadow%};

	text-align: {%= responseContentPosition%};

	height: {%= responseHeight%};
}

#adc_{%= CurrentADC.InstanceId%} .responseItem:hover
{

	/* Decoration */
	{% IF showResponseHoverBorder = "1" Then %}
		border: {%= responseHoverBorderThickness%} {%= responseHoverBorderStyle%} rgb({%= responseHoverBorderColour%});
	{% EndIF %}
	{% IF showResponseHoverColour = "1" Then %}
		background-color: rgb({%= responseHoverColourPrimary%}) !important;
	{% EndIF %}
	-webkit-box-shadow: {%= responseHoverShadow%};
	-moz-box-shadow: {%= responseHoverShadow%};
	box-shadow: {%= responseHoverShadow%};
}
@media screen and (max-width: 1000px) {
    #adc_{%= CurrentADC.InstanceId%} .responseItem:hover {

        /* Decoration */
        border: {%= borderThickness%} {%= borderStyle%} rgb({%= borderColour%});
        {% IF showResponseHoverColour = "1" Then %}
        background-color: rgb({%= responseColourPrimary%}) !important;
        {% EndIF %}
        -webkit-box-shadow: {%= responseShadow%};
        -moz-box-shadow: {%= responseShadow%};
        box-shadow: {%= responseShadow%};
    }
}
#adc_{%= CurrentADC.InstanceId%} .responseItem img
{
	float:{%= responseImagePosition%};
}

#adc_{%= CurrentADC.InstanceId%} .response_text
{
	display:{%= displayResponseText%};
	font-size:{%= fontSize%};
	text-align:{%= responseTextAlign%};
	color:rgb({%= fontColour%});

	padding:{%= responseTextPadding%};
	line-height:{%= responseTextLineHeight%};
}

#adc_{%= CurrentADC.InstanceId%} .responseItem:hover .response_text
{
	{% IF showResponseHoverFontColour = "1" Then %}
		color:rgb({%= responseHoverFontColour%});
	{% EndIF %}
}
@media screen and (max-width: 1000px) {
    #adc_{%= CurrentADC.InstanceId%} .responseItem:hover .response_text {
        {% IF showResponseHoverFontColour = "1" Then %}
        color:rgb({%= fontColour %});
        {% EndIF %}
    }
}

#adc_{%= CurrentADC.InstanceId%} .responseItem.selected, #adc_{%= CurrentADC.InstanceId%} .responseItem.selected:hover
{
    /* Decoration */
	{% IF CurrentADC.PropValue("responseSelectedBorderThickness") = "none" Then %}
		border: none;
	{% Else %}
		border: {%= responseSelectedBorderThickness%} {%= responseSelectedBorderStyle%} rgb({%= responseSelectedBorderColour%});
	{% EndIF %}
	background-color: rgb({%= responseSelectedColourPrimary%}) !important;

	-webkit-box-shadow: {%= responseSelectedShadow%};
	-moz-box-shadow: {%= responseSelectedShadow%};
	box-shadow: {%= responseSelectedShadow%};

	/* Effects */
	-webkit-border-radius:	{%= borderRadius%};
	-moz-border-radius:		{%= borderRadius%};
	-khtml-border-radius:	{%= borderRadius%};
	border-radius:			{%= borderRadius%};
}

#adc_{%= CurrentADC.InstanceId%} .responseItem.selected .response_text
{
	font-size:{%= fontSize%};
    color:rgb({%= responseSelectedFontColour%});
}

/* Non Scaled Reponses */
#adc_{%= CurrentADC.InstanceId%} .ns
{

	/* Decoration */
	{% IF CurrentADC.PropValue("nsResponseBorderThickness") = "none" Then %}
		border: none;
	{% Else %}
		border: {%= nsResponseBorderThickness%} {%= nsResponseBorderStyle%} rgb({%= nsResponseBorderColour%});
	{% EndIF %}
	background-color: rgb({%= nsResponseColourPrimary%});

	/* Effects */
	-webkit-border-radius:	{%= borderRadius%};
	-moz-border-radius:		{%= borderRadius%};
	-khtml-border-radius:	{%= borderRadius%};
	border-radius:			{%= borderRadius%};

	-webkit-box-shadow: {%= nsResponseShadow%};
	-moz-box-shadow: {%= nsResponseShadow%};
	box-shadow: {%= nsResponseShadow%};
}

#adc_{%= CurrentADC.InstanceId%} .ns .response_text
{
	display:block;
	font-size:{%= fontSize%};
	color:rgb({%= nsfontColour%});

	padding:{%= responseTextPadding%};
	line-height:{%= responseTextLineHeight%};
}

#adc_{%= CurrentADC.InstanceId%} .ns.selected, #adc_{%= CurrentADC.InstanceId%} .ns.selected:hover
{
    /* Decoration */
	{% IF CurrentADC.PropValue("nsResponseSelectedBorderThickness") = "none" Then %}
		border: none;
	{% Else %}
		border: {%= nsResponseSelectedBorderThickness%} {%= nsResponseSelectedBorderStyle%} rgb({%= nsResponseSelectedBorderColour%});
	{% EndIF %}
	background-color: rgb({%= nsResponseSelectedColourPrimary%}) !important;

	-webkit-box-shadow: {%= nsResponseSelectedShadow%};
	-moz-box-shadow: {%= nsResponseSelectedShadow%};
	box-shadow: {%= nsResponseSelectedShadow%};
}

#adc_{%= CurrentADC.InstanceId%} .ns.selected .response_text
{
    color:rgb({%= nsResponseSelectedFontColour%});
}

/* Counter */
#adc_{%= CurrentADC.InstanceId%} .counterContainer { text-align:{%= counterAlign%}; }
#adc_{%= CurrentADC.InstanceId%} .counter {
	{% IF CurrentADC.PropValue("counterBorderWidth") = "none" Then %}
		border: none;
	{% Else %}
		border: {%= counterBorderWidth%} solid rgb({%= counterBorderColour%});
	{% EndIF %}
	background-color: rgb({%= counterPrimaryColour%});

	display:inline-block;
	border-radius:{%= counterBorderRadius%};
	margin:10px 0px;
	width:30px;
	height:30px;

	-webkit-box-shadow: {%= counterDropShadow%};
	-moz-box-shadow: {%= counterDropShadow%};
	box-shadow: {%= counterDropShadow%};
}
#adc_{%= CurrentADC.InstanceId%} .counterNumber { padding:25%; text-align:center; margin:0px auto; color:rgb({%= counterFontColour%}); }

#adc_{%= CurrentADC.InstanceId%} .previousStatement,
#adc_{%= CurrentADC.InstanceId%} .nextStatement,
#adc_{%= CurrentADC.InstanceId%} .Btn
{
	/* Decoration */
	{% IF CurrentADC.PropValue("buttonBorderWidth") = "none" Then %}
		border: none;
	{% Else %}
		border: {%= buttonBorderWidth%} solid rgb({%= buttonBorderColour%});
	{% EndIF %}
	background-color: rgb({%= buttonPrimaryColour%});

	/* Effects */
	-webkit-border-radius:	{%= buttonBorderRadius%};
	-moz-border-radius:		{%= buttonBorderRadius%};
	-khtml-border-radius:	{%= buttonBorderRadius%};
	border-radius:			{%= buttonBorderRadius%};

	-webkit-box-shadow: {%= buttonDropShadow%};
	-moz-box-shadow: {%= buttonDropShadow%};
	box-shadow: {%= buttonDropShadow%};

}

#adc_{%= CurrentADC.InstanceId%} .nextStatement .img, #adc_{%= CurrentADC.InstanceId%} .previousStatement .img { background-position:{%= buttonArrowColour%}; }


/* Instead of attribute unselectable and onselectstart not allowed for div in HTML5 */
#adc_{%= CurrentADC.InstanceId%} .counterContainer,
#adc_{%= CurrentADC.InstanceId%} .previousStatement,
#adc_{%= CurrentADC.InstanceId%} .nextStatement,
#adc_{%= CurrentADC.InstanceId%} .statement{
        user-select: none;
        -moz-user-select: none;
        -khtml-user-select: none;
        -webkit-user-select: none;
        -o-user-select: none;
}
